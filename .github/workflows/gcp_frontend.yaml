name: Deploy Frontend

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '19' 

      - name: Install dependencies
        run: npm install --legacy-peer-deps
        working-directory: ./frontend

      - name: Build Next.js app
        run: npm run build
        working-directory: ./frontend
          
      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token'
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: 'gcr.io'

      - name: Build and Push Docker Image
        # working-directory: ./frontend
        run: |
          docker build \
            -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/groove-box-george-frontend:latest .
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/groove-box-george-frontend:latest


      - name: Deploy to Cloud Run
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: groove-box-george-frontend
          image: gcr.io/${{ secrets.GCP_PROJECT_ID}}/groove-box-george-frontend
          region: europe-west1
          platform: managed
          allow-authenticated: true


      - name: Allow unauthenticated access
        run: |
          gcloud run services add-iam-policy-binding groove-box-george-frontend \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --region=europe-west1 \
            --platform=managed
        

# name: Deploy

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v3

#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '16' # Use your preferred Node version

#       - name: Install dependencies
#         run: |
#           cd backend
#           npm install

#       - name: Start the server (if applicable)
#         run: |
#           cd backend
#           npm start &
#         env:
#           JWT_SECRET: ${{ secrets.JWT_SECRET }}
#           GENIUS_HOST: ${{ secrets.GENIUS_HOST }}
#           GENIUS_CLIENT_ID: ${{ secrets.GENIUS_CLIENT_ID }}
#           GENIUS_CLIENT_SECRET: ${{ secrets.GENIUS_CLIENT_SECRET }}
#           GENIUS_CLIENT_ACCESS_TOKEN: ${{ secrets.GENIUS_CLIENT_ACCESS_TOKEN }}
#           DEFAULT_EXPIRATION_TIME: ${{ secrets.DEFAULT_EXPIRATION_TIME }}
#           DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
#           DATABASE_USER: ${{ secrets.DATABASE_USER }}
#           DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
#           DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
#           DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
#           PORT: ${{ secrets.PORT }}
#           RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
#           REDIS_URL: ${{ secrets.REDIS_URL }}

#       - name: Wait for server to be ready
#         run: sleep 10
        
#       - name: Check server health
#         run: curl http://localhost:3000

#       - name: Trigger Render Deployment
#         env:
#           RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
#         run: |
#           # Define the Render API endpoint and service ID
#           SERVICE_ID=srv-cstlgkdds78s73ckmjcg # Replace this with your actual Service ID
#           RENDER_API_URL="https://api.render.com/v1/services/srv-cstlgkdds78s73ckmjcg/deploys"
#           # Trigger the deployment using Render's API
#           curl -X POST \
#             -H "Accept: application/json" \
#             -H "Authorization: Bearer $RENDER_API_KEY" \
#             $RENDER_API_URL

# name: Next.js CI/CD Pipeline
# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main
# jobs:
#   build-test-deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Setup Node.js
#         uses: actions/setup-node@v2
#         with:
#           node-version: '19'
#       - name: Install dependencies
#         run: |
#           cd frontend
#           npm install --force
#       - name: Run Lint
#         run: |
#           cd frontend
#           npm run lint
#       - name: Build Next.js app
#         run: |
#           cd frontend
#           npm run build
#       - name: Deploy to Vercel
#         env:
#           VERCEL_TOKEN: ${{ secrets.TOKEN_VERCEL }}
#         run: |
#           cd frontend
#           npx vercel deploy --prod --token $VERCEL_TOKEN --confirm


# name: Deploy

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     permissions:
#       id-token: write
#       contents: read
#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v3

#       - name: Setup Node.js
#         uses: actions/setup-node@v3
#         with:
#           node-version: '16' 

#       - name: Install dependencies
#         run: npm install
#         working-directory: ./backend
          
#       - name: Google Auth
#         id: auth
#         uses: 'google-github-actions/auth@v1'
#         with:
#           token_format: 'access_token'
#           credentials_json: ${{ secrets.GCP_SA_KEY }}

#       - name: Docker Auth
#         id: docker-auth
#         uses: 'docker/login-action@v1'
#         with:
#           username: 'oauth2accesstoken'
#           password: '${{ steps.auth.outputs.access_token }}'
#           registry: 'gcr.io'

#       - name: Build and Push Docker Image
#         working-directory: ./backend
#         run: |
#           docker build \
#             --build-arg DATABASE_HOST=${{ secrets.DATABASE_HOST }} \
#             --build-arg DATABASE_PORT=${{ secrets.DATABASE_PORT }} \
#             --build-arg DATABASE_NAME=${{ secrets.DATABASE_NAME }} \
#             --build-arg DATABASE_USER=${{ secrets.DATABASE_USER }} \
#             --build-arg DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} \
#             --build-arg DB_TYPE=${{ secrets.DB_TYPE }} \
#             --build-arg PORT=${{ secrets.PORT }} \
#             --build-arg JWT_SECRET="${{ secrets.JWT_SECRET }}" \
#             --build-arg GENIUS_HOST="${{ secrets.GENIUS_HOST }}" \
#             --build-arg GENIUS_CLIENT_ID="${{ secrets.GENIUS_CLIENT_ID }}" \
#             --build-arg GENIUS_CLIENT_SECRET="${{ secrets.GENIUS_CLIENT_SECRET }}" \
#             --build-arg GENIUS_CLIENT_ACCESS_TOKEN="${{ secrets.GENIUS_CLIENT_ACCESS_TOKEN }}" \
#             --build-arg DEFAULT_EXPIRATION_TIME="${{ secrets.DEFAULT_EXPIRATION_TIME }}" \
#             --build-arg REDIS_URL="${{ secrets.REDIS_URL }}" \
#             -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/groove-box-george:latest .
#           docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/groove-box-george:latest

#       - name: Deploy to Cloud Run
#         uses: google-github-actions/deploy-cloudrun@v1
#         with:
#           service: groove-box-george
#           image: gcr.io/${{ secrets.GCP_PROJECT_ID}}/groove-box-george
#           region: ${{ secrets.GCP_REGION }}
#           platform: managed
#           allow-authenticated: true
#           timeout: 300s

#       - name: Allow unauthenticated access
#         run: |
#           gcloud run services add-iam-policy-binding groove-box-george \
#             --member="allUsers" \
#             --role="roles/run.invoker" \
#             --region=europe-west1 \
#             --platform=managed






